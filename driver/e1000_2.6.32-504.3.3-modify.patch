diff -Nrup drivers/net/e1000/e1000.h /root/sk_zcp/driver/e1000_2.6.32-504.3.3/e1000.h
--- drivers/net/e1000/e1000.h	2014-12-13 04:29:35.000000000 +0800
+++ /root/sk_zcp/driver/e1000_2.6.32-504.3.3/e1000.h	2015-04-10 16:45:28.722000022 +0800
@@ -69,6 +69,7 @@
 #include <linux/mii.h>
 #include <linux/ethtool.h>
 #include <linux/if_vlan.h>
+#include "../driver_pag.h"
 
 #define BAR_0		0
 #define BAR_1		1
diff -Nrup drivers/net/e1000/e1000_main.c /root/sk_zcp/driver/e1000_2.6.32-504.3.3/e1000_main.c
--- drivers/net/e1000/e1000_main.c	2014-12-13 04:29:41.000000000 +0800
+++ /root/sk_zcp/driver/e1000_2.6.32-504.3.3/e1000_main.c	2015-04-13 17:54:50.146003327 +0800
@@ -175,7 +175,7 @@ static void e1000_shutdown(struct pci_de
 static void e1000_netpoll (struct net_device *netdev);
 #endif
 
-#define COPYBREAK_DEFAULT 256
+#define COPYBREAK_DEFAULT 0
 static unsigned int copybreak __read_mostly = COPYBREAK_DEFAULT;
 module_param(copybreak, uint, 0644);
 MODULE_PARM_DESC(copybreak,
@@ -1914,7 +1914,7 @@ static void e1000_unmap_and_free_tx_reso
 		buffer_info->dma = 0;
 	}
 	if (buffer_info->skb) {
-		dev_kfree_skb_any(buffer_info->skb);
+		free_zcopy_zkb(buffer_info->skb);
 		buffer_info->skb = NULL;
 	}
 	buffer_info->time_stamp = 0;
@@ -2019,7 +2019,7 @@ static void e1000_clean_rx_ring(struct e
 				struct e1000_rx_ring *rx_ring)
 {
 	struct e1000_hw *hw = &adapter->hw;
-	struct e1000_buffer *buffer_info;
+	struct e1000_buffer * buffer_info = NULL;
 	struct pci_dev *pdev = adapter->pdev;
 	unsigned long size;
 	unsigned int i;
@@ -2045,14 +2045,14 @@ static void e1000_clean_rx_ring(struct e
 			buffer_info->page = NULL;
 		}
 		if (buffer_info->skb) {
-			dev_kfree_skb(buffer_info->skb);
+			free_zcopy_zkb(buffer_info->skb);
 			buffer_info->skb = NULL;
 		}
 	}
 
 	/* there also may be some cached data from a chained receive */
 	if (rx_ring->rx_skb_top) {
-		dev_kfree_skb(rx_ring->rx_skb_top);
+		free_zcopy_zkb(buffer_info->skb);
 		rx_ring->rx_skb_top = NULL;
 	}
 
@@ -3067,7 +3067,7 @@ static netdev_tx_t e1000_xmit_frame(stru
 	tx_ring = adapter->tx_ring;
 
 	if (unlikely(skb->len <= 0)) {
-		dev_kfree_skb_any(skb);
+		free_zcopy_zkb(skb);
 		return NETDEV_TX_OK;
 	}
 
@@ -3101,7 +3101,7 @@ static netdev_tx_t e1000_xmit_frame(stru
 				if (!__pskb_pull_tail(skb, pull_size)) {
 					e_err(drv, "__pskb_pull_tail "
 					      "failed.\n");
-					dev_kfree_skb_any(skb);
+					free_zcopy_zkb(skb);
 					return NETDEV_TX_OK;
 				}
 				len = skb_headlen(skb);
@@ -3163,7 +3163,7 @@ static netdev_tx_t e1000_xmit_frame(stru
 
 	tso = e1000_tso(adapter, tx_ring, skb);
 	if (tso < 0) {
-		dev_kfree_skb_any(skb);
+		free_zcopy_zkb(skb);
 		return NETDEV_TX_OK;
 	}
 
@@ -3186,7 +3186,7 @@ static netdev_tx_t e1000_xmit_frame(stru
 		e1000_maybe_stop_tx(netdev, tx_ring, MAX_SKB_FRAGS + 2);
 
 	} else {
-		dev_kfree_skb_any(skb);
+		free_zcopy_zkb(skb);
 		tx_ring->buffer_info[first].time_stamp = 0;
 		tx_ring->next_to_use = first;
 	}
@@ -3934,7 +3934,7 @@ static void e1000_receive_skb(struct e10
 				 le16_to_cpu(vlan) & E1000_RXD_SPC_VLAN_MASK,
 				 skb);
 	else
-		napi_gro_receive(&adapter->napi, skb);
+		deliver_zcopy_zkb(skb);
 }
 
 /**
@@ -4420,7 +4420,7 @@ static void e1000_alloc_rx_buffers(struc
 			goto map_skb;
 		}
 
-		skb = netdev_alloc_skb_ip_align(netdev, bufsz);
+		skb = alloc_zcopy_zkb(netdev, bufsz);
 		if (unlikely(!skb)) {
 			/* Better luck next round */
 			adapter->alloc_rx_buff_failed++;
@@ -4433,24 +4433,24 @@ static void e1000_alloc_rx_buffers(struc
 			e_err(rx_err, "skb align check failed: %u bytes at "
 			      "%p\n", bufsz, skb->data);
 			/* Try again, without freeing the previous */
-			skb = netdev_alloc_skb_ip_align(netdev, bufsz);
+			skb = alloc_zcopy_zkb(netdev, bufsz);
 			/* Failed allocation, critical failure */
 			if (!skb) {
-				dev_kfree_skb(oldskb);
+				free_zcopy_zkb(oldskb);
 				adapter->alloc_rx_buff_failed++;
 				break;
 			}
 
 			if (!e1000_check_64k_bound(adapter, skb->data, bufsz)) {
 				/* give up */
-				dev_kfree_skb(skb);
-				dev_kfree_skb(oldskb);
+				free_zcopy_zkb(skb);
+				free_zcopy_zkb(oldskb);
 				adapter->alloc_rx_buff_failed++;
 				break; /* while !buffer_info->skb */
 			}
 
 			/* Use new allocation */
-			dev_kfree_skb(oldskb);
+			free_zcopy_zkb(oldskb);
 		}
 		buffer_info->skb = skb;
 		buffer_info->length = adapter->rx_buffer_len;
@@ -4460,7 +4460,7 @@ map_skb:
 						  buffer_info->length,
 						  DMA_FROM_DEVICE);
 		if (dma_mapping_error(&pdev->dev, buffer_info->dma)) {
-			dev_kfree_skb(skb);
+			free_zcopy_zkb(skb);
 			buffer_info->skb = NULL;
 			buffer_info->dma = 0;
 			adapter->alloc_rx_buff_failed++;
@@ -4479,7 +4479,7 @@ map_skb:
 			e_err(rx_err, "dma align check failed: %u bytes at "
 			      "%p\n", adapter->rx_buffer_len,
 			      (void *)(unsigned long)buffer_info->dma);
-			dev_kfree_skb(skb);
+			free_zcopy_zkb(skb);
 			buffer_info->skb = NULL;
 
 			dma_unmap_single(&pdev->dev, buffer_info->dma,
diff -Nrup drivers/net/e1000/Makefile /root/sk_zcp/driver/e1000_2.6.32-504.3.3/Makefile
--- drivers/net/e1000/Makefile	2009-12-03 11:51:21.000000000 +0800
+++ /root/sk_zcp/driver/e1000_2.6.32-504.3.3/Makefile	2015-04-10 16:45:28.719000022 +0800
@@ -29,7 +29,15 @@
 #
 # Makefile for the Intel(R) PRO/1000 ethernet driver
 #
+PWD  := $(shell pwd)
+KVER ?= $(shell uname -r)
+KDIR := /lib/modules/$(KVER)/build
 
-obj-$(CONFIG_E1000) += e1000.o
+obj-m += e1000.o
 
 e1000-objs := e1000_main.o e1000_hw.o e1000_ethtool.o e1000_param.o
+
+all:
+	$(MAKE) -C $(KDIR) SUBDIRS=$(shell pwd) modules
+clean:
+	rm -rf .*.cmd *.o *.mod.c *.ko .tmp_versions *.symvers modules.order *.unsigned
